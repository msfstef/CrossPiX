{"version":3,"sources":["components/PreEditor.jsx","components/Slider.jsx","components/utilities.js","components/Pixelator.jsx","components/Palette.jsx","components/ColorMapper.jsx","components/AppContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PreEditor","_this","this","img","Image","src","props","fileUrl","canvas","document","getElementById","ctx","getContext","onload","height","width","clearRect","w","h","drawImage","style","display","outputHandler","preEditUrl","toDataURL","prevProps","onImgLoad","react_default","a","createElement","id","Component","Slider","name","type","min","max","defaultValue","onChange","handler","toggleAliasing","toggle","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","ImageContainer","state","defaultScale","scale","handleSlider","setState","value","_this2","temp_w","temp_h","pixelUrl","components_Slider","Palette","data","palette","data_sorted","colors","key","push","sort","b","i","length","boxStyle","backgroundColor","className","ColorMapper","rgb_dmc","rgb_dmc_pure","defaultColors","initWidth","initHeight","reducer","RgbQuant","reIndex","method","sample","img_red","Uint8ClampedArray","reduce","imgdt","ImageData","r","g","j","rd","gd","bd","putImageData","_this3","Papa","parse","download","complete","results","slice","map","subarray","src_components_Palette","AppContainer","handleFile","files","file","window","URL","createObjectURL","url_object","accept","components_PreEditor","Pixelator","src_components_ColorMapper","App","components_AppContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94878457.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass PreEditor extends Component {\r\n    onImgLoad () {\r\n        var scale = 2;\r\n\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PreEditorCanvas');\r\n\r\n        var ctx = canvas.getContext('2d');\r\n        \r\n        \r\n\r\n        img.onload = () => {\r\n            canvas.height = img.height / scale ;\r\n            canvas.width = img.width / scale;\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            var w = canvas.width;\r\n            var h = canvas.height;\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n            img.style.display = 'none';\r\n            this.props.outputHandler({\"preEditUrl\" : canvas.toDataURL(),\r\n                                    \"width\" : canvas.width,\r\n                                    \"height\" : canvas.height});\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {   \r\n            this.onImgLoad()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"PreEditorCanvas\"></canvas>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PreEditor;","import React, { Component } from 'react';\r\n\r\nclass Slider extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input id={this.props.name} type=\"range\" \r\n                    min={this.props.min} max={this.props.max}\r\n                    defaultValue = {this.props.defaultValue}\r\n                    onChange={() => {this.props.handler()}} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;","\r\nvar toggleAliasing = (ctx, toggle) => {\r\n    if (!toggle) {\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.mozImageSmoothingEnabled = false;\r\n        ctx.webkitImageSmoothingEnabled = false;\r\n        ctx.msImageSmoothingEnabled = false;\r\n        }\r\n    else {\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.mozImageSmoothingEnabled = true;\r\n        ctx.webkitImageSmoothingEnabled = true;\r\n        ctx.msImageSmoothingEnabled = true;\r\n    }\r\n}\r\n\r\nexport {toggleAliasing}","import React, { Component } from 'react';\r\nimport Slider from './Slider';\r\nimport {toggleAliasing} from './utilities';\r\n\r\n\r\nclass ImageContainer extends Component {\r\n    state = {\r\n        defaultScale: 5,\r\n        scale: 5\r\n    }\r\n\r\n    handleSlider = () => {\r\n        this.setState({ scale : document.getElementById(\"scaleSlider\").value});\r\n        this.onImgLoad();\r\n    }\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PixelatorCanvas');\r\n        img.onload = () => {\r\n            let temp_w = img.width;\r\n            let temp_h = img.height;\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            \r\n            var ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            var w = canvas.width / this.state.scale;\r\n            var h = canvas.height / this.state.scale;\r\n            \r\n            canvas.width = w;\r\n            canvas.height = h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n            this.props.outputHandler({\"pixelUrl\" : canvas.toDataURL()});\r\n            \r\n            canvas.width = temp_w;\r\n            canvas.height = temp_h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n\r\n            \r\n            img.style.display = 'none';\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(canvas, 0, 0, w, h, 0, 0, canvas.width, canvas.height);\r\n        }        \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {\r\n            document.getElementById(\"scaleSlider\").value = this.state.defaultScale;\r\n            this.setState({ scale: this.state.defaultScale});\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"PixelatorCanvas\"></canvas>\r\n                <Slider name = \"scaleSlider\"\r\n                            min = \"1\"\r\n                            max = \"20\"\r\n                            handler = {this.handleSlider}\r\n                            defaultValue = {this.state.defaultScale} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageContainer\r\n","import React, { Component } from 'react';\r\nimport './Palette.css';\r\n\r\nclass Palette extends Component {\r\n\r\n    componentDidUpdate () {\r\n\r\n    }\r\n\r\n    render() {\r\n        let data = this.props.palette\r\n        let data_sorted = []\r\n        var colors = []\r\n        \r\n\r\n        for (var key in data) {\r\n            data_sorted.push([key, data[key][0], data[key][1], data[key][2]]);\r\n        }\r\n        data_sorted.sort((a, b) => {return b[3]-a[3]})\r\n\r\n        for (let i = 0; i < data_sorted.length; i++) {\r\n            let boxStyle = {\r\n                backgroundColor: \"#\" + data_sorted[i][2],\r\n                height: \"20px\",\r\n                width: \"40px\"\r\n            }\r\n            colors.push(\r\n                <div key={data_sorted[i]} className=\"paletteColor\">\r\n                    <div style={boxStyle} className=\"paletteBox\">\r\n                    </div>\r\n                    <p>{data_sorted[i][1]}</p>\r\n                    <p>{\"Count: \" + data_sorted[i][3]}</p>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"Palette\">     \r\n                {colors}           \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Palette;","import React, { Component } from 'react';\r\nimport {toggleAliasing} from './utilities';\r\nimport Papa from 'papaparse';\r\nimport RgbQuant from 'rgbquant';\r\nimport Slider from './Slider';\r\nimport Palette from './Palette';\r\nimport './ColorMapper.css';\r\n\r\n\r\nclass ColorMapper extends Component {\r\n    state = {\r\n        colors: 10,\r\n        rgb_dmc: [],\r\n        rgb_dmc_pure: [],\r\n        defaultColors: 50,\r\n        palette: {}\r\n    }\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('ColorMapperCanvas');\r\n        var ctx = canvas.getContext('2d');\r\n\r\n        img.onload = () => {\r\n            canvas.width = this.props.initWidth;\r\n            canvas.height = this.props.initHeight;\r\n\r\n            let reducer = new RgbQuant({\r\n                colors: this.state.colors,\r\n                palette: this.state.rgb_dmc_pure,\r\n                reIndex: false,\r\n                method: 1\r\n            });\r\n            \r\n            reducer.sample(img);\r\n            let img_red = new Uint8ClampedArray(reducer.reduce(img))\r\n\r\n            ctx.drawImage(img, 0, 0);\r\n\r\n            let imgdt = new ImageData(img_red, img.width, img.height)\r\n\r\n            var palette = {}\r\n            for (let i = 0; i < img_red.length; i += 4) {\r\n                let r = img_red[i + 0];\r\n                let g = img_red[i + 1];\r\n                let b = img_red[i + 2];\r\n                for (let j = 0; j < this.state.rgb_dmc.length; j += 1) {\r\n                    let rd = this.state.rgb_dmc[j][2];\r\n                    let gd = this.state.rgb_dmc[j][3];\r\n                    let bd = this.state.rgb_dmc[j][4];\r\n\r\n                    if (r-rd === 0 && \r\n                        g-gd === 0 &&\r\n                        b-bd === 0) {                        \r\n                        if (!(this.state.rgb_dmc[j][0] in palette)) {\r\n                            palette[this.state.rgb_dmc[j][0]] = \r\n                                            [this.state.rgb_dmc[j][1],\r\n                                            this.state.rgb_dmc[j][5],\r\n                                            1];\r\n                        } else {\r\n                            palette[this.state.rgb_dmc[j][0]][2] ++;\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n            this.setState({palette: palette});\r\n\r\n            ctx.putImageData(imgdt, 0, 0)\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(canvas, 0, 0, img.width, img.height, \r\n                                0, 0, this.props.initWidth, this.props.initHeight);\r\n\r\n        }\r\n    }\r\n\r\n    \r\n    componentDidMount () {\r\n        Papa.parse(\"/assets/rgb_to_dmc.csv\", {\r\n            download: true,\r\n\r\n            complete: (results) => {\r\n                this.setState({ rgb_dmc: results.data.slice(1) })\r\n                let rgb_dmc_pure = this.state.rgb_dmc.map( (subarray) => {\r\n                    return subarray.slice(2,5);\r\n                })\r\n                this.setState({ rgb_dmc_pure: rgb_dmc_pure });\r\n            }\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {   \r\n            document.getElementById(\"colorSlider\").value = this.state.defaultColors;\r\n            this.setState({ colors: this.state.defaultColors});\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n\r\n    handleSlider = () => {\r\n        this.setState({ colors : document.getElementById(\"colorSlider\").value});\r\n        this.onImgLoad();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"PicPalette\">\r\n                    <canvas id=\"ColorMapperCanvas\"></canvas>\r\n                    <Palette palette={this.state.palette} />\r\n                </div>\r\n                <Slider name = \"colorSlider\" \r\n                            min = \"5\"\r\n                            max = \"100\"\r\n                            handler = {this.handleSlider}\r\n                            defaultValue = {this.state.defaultColors} />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorMapper;\r\n","import React, { Component } from 'react';\r\nimport PreEditor from './PreEditor';\r\nimport Pixelator from './Pixelator';\r\nimport ColorMapper from './ColorMapper';\r\n\r\n\r\nclass AppContainer extends Component {\r\n\r\n    state = {\r\n        width: 0,\r\n        height: 0,\r\n        fileUrl : '',\r\n        preEditUrl : '',\r\n        pixelUrl : ''\r\n    }\r\n\r\n    handleFile = (files) => {\r\n        var file = document.getElementById('img_upload').files[0];\r\n        if (file) {\r\n            this.setState({ fileUrl : window.URL.createObjectURL(file) });\r\n        }\r\n    }\r\n\r\n    outputHandler = (url_object) => {\r\n        this.setState(url_object)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"file\" id=\"img_upload\" accept=\"image/*\" \r\n                    onChange= {()=>{this.handleFile()}} />\r\n                <PreEditor fileUrl = {this.state.fileUrl}\r\n                            outputHandler = {this.outputHandler}  />\r\n                <Pixelator fileUrl = {this.state.preEditUrl} \r\n                            outputHandler = {this.outputHandler} />\r\n                <ColorMapper fileUrl = {this.state.pixelUrl}\r\n                            outputHandler = {this.outputHandler}\r\n                            initWidth = {this.state.width}\r\n                            initHeight = {this.state.height}  />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContainer;","import React, { Component } from 'react';\nimport AppContainer from './components/AppContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}