{"version":3,"sources":["components/PreEditor.jsx","components/Slider.jsx","components/utilities.js","components/Pixelator.jsx","components/kmeans.js","components/Palette.jsx","components/ColorMapper.jsx","components/AppContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PreEditor","_this","this","img","Image","src","props","fileUrl","canvas","document","getElementById","ctx","getContext","onload","proportion","height","width","clearRect","w","h","drawImage","imgc","getImageData","i","data","length","putImageData","outputHandler","preEditUrl","toDataURL","prevProps","onImgLoad","react_default","a","createElement","className","id","Component","Slider","state","value","defaultValue","elem_val","name","setState","_this2","type","step","min","max","onChange","handler","toggleAliasing","toggle","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","ImageContainer","defaultHorStitches","horStitches","handleSlider","temp_w","temp_h","pixelUrl","src_components_Slider","arrays_equal","a1","a2","get_pixel_dataset","resized_pixels","undefined","img_n_pixels","canvas_width","canvas_height","rescaled","pixels","aspect_ratio","scaling_factor","Math","sqrt","floor","rescale_dimensions","canvas_n_pixels","context","flattened_dataset","n_channels","dataset","push","slice","nearest_neighbor","point","neighbors","best_dist","Infinity","best_index","neighbor","dist","j","pow","centroid","running_centroid","quantize_img","k","centroids","source_canvas","source_context","flattened_source_data","n_pixels","flattened_quantized_data","Uint8ClampedArray","current_pixel","nearest_color","quantized_canvas","quantized_context","image","createImageData","set","quantize","rng_seed","random","idx","clusters","converged","cluster","centroid_i","k_means","Palette","palette","data_sorted","colors","key","sort","b","boxStyle","backgroundColor","style","ColorMapper","rgb_dmc","rgb_dmc_pure","defaultColors","buffer","ctxb","src_qt","img_qt","initWidth","imgdt","new_data","Array","r","g","rd","gd","bd","new_dist","_this3","Papa","parse","download","complete","results","map","subarray","src_components_Palette","AppContainer","handleFile","files","file","window","URL","createObjectURL","url_object","accept","components_PreEditor","Pixelator","components_ColorMapper","App","src_components_AppContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27ba0493.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass PreEditor extends Component {\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PreEditorCanvas');\r\n\r\n        var ctx = canvas.getContext('2d');\r\n        \r\n        \r\n\r\n        img.onload = () => {\r\n            let proportion = img.height/img.width;\r\n            if (proportion < 1) {\r\n                canvas.width = 300;\r\n                canvas.height = canvas.width * proportion;\r\n            } else {\r\n                canvas.height = 300;\r\n                canvas.width = canvas.height / proportion;\r\n            }\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            var w = canvas.width;\r\n            var h = canvas.height;\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n\r\n            /* Make transparent pixels white */\r\n            let imgc = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n            for (let i = 0; i < imgc.data.length; i += 4) {\r\n                if (imgc.data[i+3] === 0) {\r\n                    imgc.data[i] = 255;\r\n                    imgc.data[i+1] = 255;\r\n                    imgc.data[i+2] = 255;\r\n                    imgc.data[i+3] = 255;\r\n                } else {\r\n                    imgc.data[i+3] = 255;\r\n                }\r\n            }\r\n\r\n            ctx.putImageData(imgc, 0, 0)\r\n\r\n            this.props.outputHandler({\"preEditUrl\" : canvas.toDataURL(),\r\n                                    \"width\" : canvas.width,\r\n                                    \"proportion\" : proportion});\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {   \r\n            this.onImgLoad()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"picEditor\">\r\n                <canvas className=\"picCanvas\" id=\"PreEditorCanvas\"></canvas>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PreEditor;\r\n\r\n\r\n/*\r\nfunction dragAction(img, context, canvas) {\r\n    var currentX = 0;\r\n    var currentY = 0;\r\n    var isDraggable = false;\r\n\r\n    canvas.onmousedown = function(e) {\r\n        var mouseX = e.pageX - this.offsetLeft;\r\n        var mouseY = e.pageY - this.offsetTop;\r\n\r\n        if (mouseX >= (currentX - img.width/2) &&\r\n            mouseX <= (currentX + img.width/2) &&\r\n            mouseY >= (currentY - img.height/2) &&\r\n            mouseY <= (currentY + img.height/2)) {\r\n        isDraggable = true;\r\n        }\r\n    };\r\n    canvas.onmousemove = function(e) {\r\n        if (isDraggable) {\r\n        currentX = e.pageX - this.offsetLeft;\r\n        currentY = e.pageY - this.offsetTop;\r\n        context.fillStyle = '#fff';\r\n        context.fillRect(0,0, canvas.width, canvas.height);\r\n        context.drawImage(img, currentX-(canvas.width/2), currentY-(canvas.height/2),\r\n                                canvas.width, canvas.height);\r\n        }\r\n    };\r\n    canvas.onmouseup = function(e) {\r\n        isDraggable = false;\r\n    };\r\n    canvas.onmouseout = function(e) {\r\n        isDraggable = false;\r\n    };\r\n}\r\n*/","import React, { Component } from 'react';\r\nimport './Slider.css';\r\n\r\nclass Slider extends Component {\r\n    state = {\r\n        value: this.props.defaultValue\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        let elem_val = document.getElementById(this.props.name).value;\r\n        if (elem_val !== this.state.value) {\r\n            this.setState({value: elem_val});\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Slider\">\r\n                <input id={this.props.name} \r\n                    type=\"range\" step=\"1\"\r\n                    min={this.props.min} max={this.props.max}\r\n                    defaultValue = {this.props.defaultValue}\r\n                    onChange={() => {\r\n                        this.props.handler();\r\n                        this.setState({value : \r\n                            document.getElementById(this.props.name).value});\r\n                        }\r\n                } />\r\n                <span className=\"SliderValue\">\r\n                    <span className=\"SliderText\">\r\n                    {this.state.value}\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;","\r\nvar toggleAliasing = (ctx, toggle) => {\r\n    if (!toggle) {\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.mozImageSmoothingEnabled = false;\r\n        ctx.webkitImageSmoothingEnabled = false;\r\n        ctx.msImageSmoothingEnabled = false;\r\n        }\r\n    else {\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.mozImageSmoothingEnabled = true;\r\n        ctx.webkitImageSmoothingEnabled = true;\r\n        ctx.msImageSmoothingEnabled = true;\r\n    }\r\n}\r\n\r\nexport {toggleAliasing}","import React, { Component } from 'react';\r\nimport Slider from './Slider';\r\nimport {toggleAliasing} from './utilities';\r\n\r\n\r\nclass ImageContainer extends Component {\r\n    state = {\r\n        defaultHorStitches: 75,\r\n        horStitches: 75\r\n    }\r\n\r\n    handleSlider = () => {\r\n        this.setState({ horStitches : document.getElementById(\"horStitchesSlider\").value});\r\n        this.onImgLoad();\r\n    }\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PixelatorCanvas');\r\n        img.onload = () => {\r\n            let temp_w = img.width;\r\n            let temp_h = img.height;\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            \r\n            var ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            var w = this.state.horStitches;\r\n            var h = (img.height/img.width)*this.state.horStitches;\r\n            \r\n            canvas.width = w;\r\n            canvas.height = h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n            this.props.outputHandler({\"pixelUrl\" : canvas.toDataURL()});\r\n            \r\n            canvas.width = temp_w;\r\n            canvas.height = temp_h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(canvas, 0, 0, w, h, 0, 0, canvas.width, canvas.height);\r\n        }        \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {\r\n            document.getElementById(\"horStitchesSlider\").value = this.state.defaultHorStitches;\r\n            this.setState({ horStitches: this.state.defaultHorStitches});\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"picEditor\">\r\n                <canvas className=\"picCanvas\" id=\"PixelatorCanvas\"></canvas>\r\n                <Slider name = \"horStitchesSlider\"\r\n                            min = \"10\"\r\n                            max = \"150\"\r\n                            handler = {this.handleSlider}\r\n                            defaultValue = {this.state.defaultHorStitches} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageContainer\r\n","// *************************************************\n// * Adapted from \n// * https://github.com/dstein64/k-means-quantization-js\n// *************************************************\n\n\n// *************************************************\n// * Constants\n// *************************************************\n\nvar MAX_K_MEANS_PIXELS = 50000;\n\n//*************************************************\n//* Image/Data Processing\n//*************************************************\n\n// Checks for equality of elements in two arrays.\nvar arrays_equal = function(a1, a2) {\n  if (a1.length !== a2.length) return false;\n  for (var i = 0; i < a1.length; ++i) {\n    if (a1[i] !== a2[i]) return false;\n  }\n  return true;\n};\n\n// Given width w and height h, rescale the dimensions to satisfy\n// the specified number of pixels.\nvar rescale_dimensions = function(w, h, pixels) {\n  var aspect_ratio = w / h;\n  var scaling_factor = Math.sqrt(pixels / aspect_ratio);\n  var rescaled_w = Math.floor(aspect_ratio * scaling_factor);\n  var rescaled_h = Math.floor(scaling_factor);\n  return [rescaled_w, rescaled_h];\n};\n\n// Given an Image, return a dataset with pixel colors.\n// If resized_pixels > 0, image will be resized prior to building\n// the dataset.\n// return: [[R,G,B,a], [R,G,B,a], [R,G,B,a], ...]\nvar get_pixel_dataset = function(img, resized_pixels) {\n  if (resized_pixels === undefined) resized_pixels = -1;\n  // Get pixel colors from a <canvas> with the image\n  var canvas = document.createElement(\"canvas\");\n  var img_n_pixels = img.width * img.height;\n  var canvas_width = img.width;\n  var canvas_height = img.height;\n  if (resized_pixels > 0 && img_n_pixels > resized_pixels) {\n    var rescaled = rescale_dimensions(img.width, img.height, resized_pixels)\n    canvas_width = rescaled[0];\n    canvas_height = rescaled[1];\n  }\n  canvas.width = canvas_width;\n  canvas.height = canvas_height;\n  var canvas_n_pixels = canvas_width * canvas_height;\n  var context = canvas.getContext(\"2d\");\n  context.drawImage(img, 0, 0, canvas_width, canvas_height);  \n  var flattened_dataset = context.getImageData(\n      0, 0, canvas_width, canvas_height).data;\n  var n_channels = flattened_dataset.length / canvas_n_pixels;\n  var dataset = [];\n  for (var i = 0; i < flattened_dataset.length; i += n_channels) {\n    dataset.push(flattened_dataset.slice(i, i + n_channels));\n  }\n  return dataset;\n};\n\n// Given a point and a list of neighbor points, return the index\n// for the neighbor that's closest to the point.\nvar nearest_neighbor = function(point, neighbors) {\n  var best_dist = Infinity; // squared distance\n  var best_index = -1;\n  for (var i = 0; i < neighbors.length; ++i) {\n    var neighbor = neighbors[i];\n    var dist = 0;\n    for (var j = 0; j < point.length; ++j) {\n      dist += Math.pow(point[j] - neighbor[j], 2);\n    }\n    if (dist < best_dist) {\n      best_dist = dist;\n      best_index = i;\n    }\n  }\n  return best_index;\n};\n\n// Returns the centroid of a dataset.\nvar centroid = function(dataset) {\n  if (dataset.length === 0) return [];\n  // Calculate running means.\n  var running_centroid = [];\n  for (let i = 0; i < dataset[0].length; ++i) {\n    running_centroid.push(0);\n  }\n  for (let i = 0; i < dataset.length; ++i) {\n    var point = dataset[i];\n    for (let j = 0; j < point.length; ++j) {\n      running_centroid[j] += (point[j] - running_centroid[j]) / (i+1);\n    }\n  }\n  return running_centroid;\n};\n\n// Returns the k-means centroids.\nvar k_means = function(dataset, k) {\n  if (k === undefined) k = Math.min(3, dataset.length);\n  // Use a seeded random number generator instead of Math.random(),\n  // so that k-means always produces the same centroids for the same\n  // input.\n  let rng_seed = 0;\n  var random = function() {\n    rng_seed = (rng_seed * 9301 + 49297) % 233280;\n    return rng_seed / 233280;\n  };\n  // Choose initial centroids randomly.\n  let centroids = [];\n  for (var i = 0; i < k; ++i) {\n    var idx = Math.floor(random() * dataset.length);\n    centroids.push(dataset[idx]);\n  }\n  while (true) {\n    // 'clusters' is an array of arrays. each sub-array corresponds to\n    // a cluster, and has the points in that cluster.\n    var clusters = [];\n    for (let i = 0; i < k; ++i) {\n      clusters.push([]);\n    }\n    for (let i = 0; i < dataset.length; ++i) {\n      var point = dataset[i];\n      var nearest_centroid = nearest_neighbor(point, centroids);\n      clusters[nearest_centroid].push(point);\n    }\n    var converged = true;\n    for (let i = 0; i < k; ++i) {\n      var cluster = clusters[i];\n      var centroid_i = [];\n      if (cluster.length > 0) {\n        centroid_i = centroid(cluster);\n      } else {\n        // For an empty cluster, set a random point as the centroid.\n        let idx = Math.floor(random() * dataset.length);\n        centroid_i = dataset[idx];\n      }\n      converged = converged && arrays_equal(centroid_i, centroids[i]);\n      centroids[i] = centroid_i;\n    }\n    if (converged) break;\n  }\n  return centroids;\n};\n\n// Takes an <img> as input. Returns a quantized data URL.\nvar quantize = function(img, centroids) {\n  var width = img.width;\n  var height = img.height;\n  var source_canvas = document.createElement(\"canvas\");\n  source_canvas.width = width;\n  source_canvas.height = height;\n  var source_context = source_canvas.getContext(\"2d\");\n  source_context.drawImage(img, 0, 0, width, height);\n  \n  // flattened_*_data = [R, G, B, a, R, G, B, a, ...] where\n  // (R, G, B, a) groups each correspond to a single pixel, and they are\n  // column-major ordered.\n  var flattened_source_data = source_context.getImageData(\n      0, 0, width, height).data;\n  var n_pixels = width * height;\n  var n_channels = flattened_source_data.length / n_pixels;\n  \n  var flattened_quantized_data = new Uint8ClampedArray(\n      flattened_source_data.length);\n  \n  // Set each pixel to its nearest color.\n  var current_pixel = new Uint8ClampedArray(n_channels);\n  for (var i = 0; i < flattened_source_data.length; i += n_channels) {\n    // This for loop approach is faster than using Array.slice().\n    for (var j = 0; j < n_channels; ++j) {\n      current_pixel[j] = flattened_source_data[i + j];\n    }\n    var nearest_color_index = nearest_neighbor(current_pixel, centroids);\n    var nearest_color = centroids[nearest_color_index];\n    for (let j = 0; j < nearest_color.length; ++j) {\n      flattened_quantized_data[i+j] = nearest_color[j];\n    }\n  }\n  \n  var quantized_canvas = document.createElement(\"canvas\");\n  quantized_canvas.width = width;\n  quantized_canvas.height = height;\n  var quantized_context = quantized_canvas.getContext(\"2d\");\n  \n  var image = quantized_context.createImageData(width, height);\n  image.data.set(flattened_quantized_data);\n  quantized_context.putImageData(image, 0, 0);\n  let data_url = quantized_canvas.toDataURL();\n  return data_url;\n};\n\n\nvar quantize_img = function (img, k ) {\n    // Use a fixed maximum so that k-means works fast.\n    var pixel_dataset = get_pixel_dataset(img, MAX_K_MEANS_PIXELS);\n    var centroids = k_means(pixel_dataset, k);\n    var data_url = quantize(img, centroids);\n    return data_url;\n};\n\nexport {quantize_img};","import React, { Component } from 'react';\r\nimport './Palette.css';\r\n\r\nclass Palette extends Component {\r\n\r\n    componentDidUpdate () {\r\n\r\n    }\r\n\r\n    render() {\r\n        let data = this.props.palette\r\n        let data_sorted = []\r\n        var colors = []\r\n        \r\n\r\n        for (var key in data) {\r\n            data_sorted.push([key, data[key][0], data[key][1], data[key][2]]);\r\n        }\r\n        data_sorted.sort((a, b) => {return b[3]-a[3]})\r\n\r\n        for (let i = 0; i < data_sorted.length; i++) {\r\n            let boxStyle = {\r\n                backgroundColor: \"#\" + data_sorted[i][2],\r\n                height: \"20px\",\r\n                width: \"40px\"\r\n            }\r\n            colors.push(\r\n                <div key={data_sorted[i]} className=\"paletteColor\">\r\n                    <div style={boxStyle} className=\"paletteBox\">\r\n                    </div>\r\n                    <p>{data_sorted[i][1]}</p>\r\n                    <p>{\"DMC: \" + data_sorted[i][0]}</p>\r\n                    <p>{\"Count: \" + data_sorted[i][3]}</p>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"Palette\">     \r\n                {colors}           \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Palette;","import React, { Component } from 'react';\r\nimport {toggleAliasing} from './utilities';\r\nimport Papa from 'papaparse';\r\nimport {quantize_img} from './kmeans.js'\r\nimport Slider from './Slider';\r\nimport Palette from './Palette';\r\n\r\n\r\nclass ColorMapper extends Component {\r\n    state = {\r\n        colors: 10,\r\n        rgb_dmc: [],\r\n        rgb_dmc_pure: [],\r\n        defaultColors: 10,\r\n        palette: {}\r\n    }\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('ColorMapperCanvas');\r\n        var buffer = document.createElement('canvas');\r\n        var ctx = canvas.getContext('2d');\r\n        var ctxb = buffer.getContext('2d');\r\n        \r\n        img.onload = () => {\r\n            let src_qt = quantize_img(img, this.state.colors)\r\n            var img_qt = new Image();\r\n            img_qt.src = src_qt;\r\n        \r\n\r\n        img_qt.onload = () => {\r\n            canvas.width = this.props.initWidth;\r\n            canvas.height = canvas.width*this.props.proportion;\r\n            buffer.width = canvas.width;\r\n            buffer.height = canvas.height\r\n\r\n            ctxb.drawImage(img_qt, 0, 0);\r\n               \r\n            let imgdt = ctxb.getImageData(0, 0, img_qt.width, img_qt.height);\r\n            let new_data = new Array(imgdt.data.length);\r\n\r\n\r\n            var palette = {}\r\n            for (let i = 0; i < imgdt.data.length; i += 4) {\r\n                let r = imgdt.data[i + 0];\r\n                let g = imgdt.data[i + 1];\r\n                let b = imgdt.data[i + 2];\r\n                \r\n                let dist = 99999999;\r\n                let idx = 0;\r\n                for (let j = 0; j < this.state.rgb_dmc.length; j += 1) {\r\n                    let rd = this.state.rgb_dmc[j][2];\r\n                    let gd = this.state.rgb_dmc[j][3];\r\n                    let bd = this.state.rgb_dmc[j][4];\r\n\r\n                    let new_dist = (r-rd)*(r-rd) + (g-gd)*(g-gd) + (b-bd)*(b-bd);\r\n\r\n                    if (new_dist < dist) {\r\n                        dist = new_dist;\r\n                        idx = j;\r\n                        if (new_dist < 2) break;\r\n                    }\r\n\r\n                }\r\n\r\n                new_data[i+0] = this.state.rgb_dmc[idx][2];\r\n                new_data[i+1] = this.state.rgb_dmc[idx][3];\r\n                new_data[i+2] = this.state.rgb_dmc[idx][4];\r\n                new_data[i+3] = 255;\r\n                \r\n                if (!(this.state.rgb_dmc[idx][0] in palette)) {\r\n                    palette[this.state.rgb_dmc[idx][0]] = \r\n                                    [this.state.rgb_dmc[idx][1],\r\n                                    this.state.rgb_dmc[idx][5],\r\n                                    1];\r\n                } else {\r\n                    palette[this.state.rgb_dmc[idx][0]][2] ++;\r\n                } \r\n            }\r\n            this.setState({palette: palette});\r\n\r\n            imgdt.data.set(new_data);\r\n\r\n            ctxb.putImageData(imgdt, 0, 0)\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(buffer, 0, 0, img_qt.width, img_qt.height, \r\n                                0, 0, canvas.width, canvas.height);\r\n\r\n        }\r\n        }\r\n    }\r\n\r\n    \r\n    componentDidMount () {\r\n        Papa.parse(\"/assets/rgb_to_dmc.csv\", {\r\n            download: true,\r\n\r\n            complete: (results) => {\r\n                this.setState({ rgb_dmc: results.data.slice(1) })\r\n                let rgb_dmc_pure = this.state.rgb_dmc.map( (subarray) => {\r\n                    return subarray.slice(2,5);\r\n                })\r\n                this.setState({ rgb_dmc_pure: rgb_dmc_pure });\r\n            }\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {   \r\n            document.getElementById(\"colorSlider\").value = this.state.defaultColors;\r\n            this.setState({ colors: this.state.defaultColors});\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n\r\n    handleSlider = () => {\r\n        this.setState({ colors : document.getElementById(\"colorSlider\").value});\r\n        this.onImgLoad();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"picEditor\">\r\n                <canvas className=\"picCanvas\" id=\"ColorMapperCanvas\"></canvas>\r\n                <Palette palette={this.state.palette} />\r\n                <Slider name = \"colorSlider\" \r\n                            min = \"2\"\r\n                            max = \"50\"\r\n                            handler = {this.handleSlider}\r\n                            defaultValue = {this.state.defaultColors} />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorMapper;\r\n","import React, { Component } from 'react';\r\nimport PreEditor from './PreEditor';\r\nimport Pixelator from './Pixelator';\r\nimport ColorMapper from './ColorMapper';\r\nimport './AppContainer.css';\r\n\r\n\r\nclass AppContainer extends Component {\r\n\r\n    state = {\r\n        width: 0,\r\n        proportion: 0,\r\n        fileUrl : '',\r\n        preEditUrl : '',\r\n        pixelUrl : ''\r\n    }\r\n\r\n    handleFile = (files) => {\r\n        var file = document.getElementById('img_upload').files[0];\r\n        if (file) {\r\n            this.setState({ fileUrl : window.URL.createObjectURL(file) });\r\n        }\r\n    }\r\n\r\n    outputHandler = (url_object) => {\r\n        this.setState(url_object)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"AppContainer\">\r\n                <input type=\"file\" id=\"img_upload\" accept=\"image/*\" \r\n                    onChange= {()=>{this.handleFile()}} />\r\n                <PreEditor fileUrl = {this.state.fileUrl}\r\n                            outputHandler = {this.outputHandler}  />\r\n                <Pixelator fileUrl = {this.state.preEditUrl} \r\n                            outputHandler = {this.outputHandler}  />\r\n                <ColorMapper fileUrl = {this.state.pixelUrl}\r\n                            outputHandler = {this.outputHandler}\r\n                            initWidth = {this.state.width}\r\n                            proportion = {this.state.proportion}  />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContainer;","import React, { Component } from 'react';\nimport AppContainer from './components/AppContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}