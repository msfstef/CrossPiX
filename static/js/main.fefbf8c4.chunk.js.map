{"version":3,"sources":["components/PreEditor.jsx","components/Slider.jsx","components/Pixelator.jsx","components/ColorMapper.jsx","components/AppContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PreEditor","_this","this","img","Image","src","props","fileUrl","canvas","document","getElementById","ctx","getContext","onload","height","width","clearRect","w","h","drawImage","style","display","outputHandler","preEditUrl","toDataURL","prevProps","onImgLoad","react_default","a","createElement","id","Component","Slider","name","type","min","max","defaultValue","defaultScale","onChange","handler","ImageContainer","state","scale","handleSlider","setState","value","_this2","temp_w","temp_h","toggleAliasing","pixelUrl","components_Slider","toggle","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","ColorMapper","rgb_dmc","initWidth","initHeight","imgdt","getImageData","i","data","length","r","g","b","dist","idx","j","rd","gd","bd","new_dist","Math","sqrt","pow","console","log","putImageData","_this3","Papa","parse","download","complete","results","slice","AppContainer","handleFile","files","file","window","URL","createObjectURL","url_object","accept","components_PreEditor","Pixelator","components_ColorMapper","App","className","components_AppContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fefbf8c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass PreEditor extends Component {\r\n    onImgLoad () {\r\n        var scale = 2;\r\n\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PreEditorCanvas');\r\n\r\n        var ctx = canvas.getContext('2d');\r\n        \r\n        \r\n\r\n        img.onload = () => {\r\n            canvas.height = img.height / scale ;\r\n            canvas.width = img.width / scale;\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            var w = canvas.width;\r\n            var h = canvas.height;\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n            img.style.display = 'none';\r\n            this.props.outputHandler({\"preEditUrl\" : canvas.toDataURL(),\r\n                                    \"width\" : canvas.width,\r\n                                    \"height\" : canvas.height});\r\n        }\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {\r\n            this.onImgLoad()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"PreEditorCanvas\"></canvas>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PreEditor;","import React, { Component } from 'react';\r\n\r\nclass Slider extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input id={this.props.name} type=\"range\" min=\"1\" max=\"20\" \r\n                    defaultValue = {this.props.defaultScale}\r\n                    onChange={() => {this.props.handler()}} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;","import React, { Component } from 'react';\r\nimport Slider from './Slider';\r\n\r\n\r\nclass ImageContainer extends Component {\r\n    state = {\r\n        defaultScale: 5,\r\n        scale: 5\r\n    }\r\n\r\n    handleSlider = () => {\r\n        this.setState({ scale : document.getElementById(\"scaleSlider\").value});\r\n        this.onImgLoad();\r\n    }\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('PixelatorCanvas');\r\n        img.onload = () => {\r\n            let temp_w = img.width;\r\n            let temp_h = img.height;\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            \r\n            var ctx = canvas.getContext('2d');\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            var w = canvas.width / this.state.scale;\r\n            var h = canvas.height / this.state.scale;\r\n            \r\n            canvas.width = w;\r\n            canvas.height = h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n            this.props.outputHandler({\"pixelUrl\" : canvas.toDataURL()});\r\n            \r\n            canvas.width = temp_w;\r\n            canvas.height = temp_h;\r\n            toggleAliasing(ctx, true);\r\n            ctx.drawImage(img, 0, 0, w, h);\r\n\r\n            \r\n            img.style.display = 'none';\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(canvas, 0, 0, w, h, 0, 0, canvas.width, canvas.height);\r\n        }        \r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {\r\n            document.getElementById(\"scaleSlider\").value = this.state.defaultScale;\r\n            this.setState({ scale: this.state.defaultScale});\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"PixelatorCanvas\"></canvas>\r\n                <Slider name = \"scaleSlider\" \r\n                            handler = {this.handleSlider}\r\n                            defaultScale = {this.state.defaultScale} />             \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageContainer\r\n\r\nvar toggleAliasing = (ctx, toggle) => {\r\n    if (!toggle) {\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.mozImageSmoothingEnabled = false;\r\n        ctx.webkitImageSmoothingEnabled = false;\r\n        ctx.msImageSmoothingEnabled = false;\r\n        }\r\n    else {\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.mozImageSmoothingEnabled = true;\r\n        ctx.webkitImageSmoothingEnabled = true;\r\n        ctx.msImageSmoothingEnabled = true;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nclass ColorMapper extends Component {\r\n\r\n    rgb_dmc = [];\r\n\r\n    onImgLoad () {\r\n        var img = new Image();\r\n        img.src = this.props.fileUrl;\r\n\r\n        var canvas = document.getElementById('ColorMapperCanvas');\r\n        var ctx = canvas.getContext('2d');\r\n\r\n        img.onload = () => {\r\n            canvas.width = this.props.initWidth;\r\n            canvas.height = this.props.initHeight;\r\n\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(img, 0, 0);\r\n            let imgdt = ctx.getImageData(0, 0, img.width, img.height)\r\n            \r\n            for (let i = 0; i < imgdt.data.length; i += 4) {\r\n                let r = imgdt.data[i + 0];\r\n                let g = imgdt.data[i + 1];\r\n                let b = imgdt.data[i + 2];\r\n                let dist = 1000;\r\n                let idx = 0;\r\n                for (let j = 0; j < this.rgb_dmc.length; j += 1) {\r\n                    let rd = this.rgb_dmc[j][2];\r\n                    let gd = this.rgb_dmc[j][3];\r\n                    let bd = this.rgb_dmc[j][4];\r\n\r\n                    let new_dist = Math.sqrt((r-rd)**2 +\r\n                                            (g-gd)**2 +\r\n                                            (b-bd)**2)\r\n                    if (new_dist < dist) {\r\n                        dist = new_dist\r\n                        idx = j;\r\n                    }\r\n                }\r\n                imgdt.data[i + 0] = this.rgb_dmc[idx][2];\r\n                imgdt.data[i + 1] = this.rgb_dmc[idx][3];\r\n                imgdt.data[i + 2] = this.rgb_dmc[idx][4];\r\n            }\r\n            console.log(imgdt)\r\n            ctx.putImageData(imgdt, 0, 0)\r\n            toggleAliasing(ctx, false);\r\n            ctx.drawImage(canvas, 0, 0, img.width, img.height, \r\n                                0, 0, this.props.initWidth, this.props.initHeight);\r\n\r\n        }\r\n    }\r\n\r\n    \r\n    componentDidMount () {\r\n        Papa.parse(\"/assets/rgb_to_dmc.csv\", {\r\n            download: true,\r\n\r\n            complete: (results) => {\r\n                this.rgb_dmc = results.data.slice(1);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fileUrl !== prevProps.fileUrl)\r\n        {\r\n            this.onImgLoad();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id=\"ColorMapperCanvas\"></canvas>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorMapper;\r\n\r\n\r\nvar toggleAliasing = (ctx, toggle) => {\r\n    if (!toggle) {\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.mozImageSmoothingEnabled = false;\r\n        ctx.webkitImageSmoothingEnabled = false;\r\n        ctx.msImageSmoothingEnabled = false;\r\n        }\r\n    else {\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.mozImageSmoothingEnabled = true;\r\n        ctx.webkitImageSmoothingEnabled = true;\r\n        ctx.msImageSmoothingEnabled = true;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PreEditor from './PreEditor';\r\nimport Pixelator from './Pixelator';\r\nimport ColorMapper from './ColorMapper';\r\n\r\n\r\nclass AppContainer extends Component {\r\n\r\n    state = {\r\n        width: 0,\r\n        height: 0,\r\n        fileUrl : '',\r\n        preEditUrl : '',\r\n        pixelUrl : ''\r\n    }\r\n\r\n    handleFile = (files) => {\r\n        var file = document.getElementById('img_upload').files[0];\r\n        if (file) {\r\n            this.setState({ fileUrl : window.URL.createObjectURL(file) });\r\n        }\r\n    }\r\n\r\n    outputHandler = (url_object) => {\r\n        this.setState(url_object)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"file\" id=\"img_upload\" accept=\"image/*\" \r\n                    onChange= {()=>{this.handleFile()}} />\r\n                <PreEditor fileUrl = {this.state.fileUrl}\r\n                            outputHandler = {this.outputHandler}  />\r\n                <Pixelator fileUrl = {this.state.preEditUrl} \r\n                            outputHandler = {this.outputHandler} />\r\n                <ColorMapper fileUrl = {this.state.pixelUrl}\r\n                            outputHandler = {this.outputHandler}\r\n                            initWidth = {this.state.width}\r\n                            initHeight = {this.state.height}  />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContainer;","import React, { Component } from 'react';\nimport AppContainer from './components/AppContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}